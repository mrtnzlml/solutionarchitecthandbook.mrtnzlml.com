<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>The Solution Architect's Handbook Blog</title>
        <link>https://solutionarchitecthandbook.mrtnzlml.com/cookbook</link>
        <description>The Solution Architect's Handbook Blog</description>
        <lastBuildDate>Thu, 28 Aug 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[3 things you need to know about Reasoning Fields]]></title>
            <link>https://solutionarchitecthandbook.mrtnzlml.com/cookbook/three-things-you-need-to-know-about-reasoning-fields</link>
            <guid>https://solutionarchitecthandbook.mrtnzlml.com/cookbook/three-things-you-need-to-know-about-reasoning-fields</guid>
            <pubDate>Thu, 28 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Rossum.ai recently introduced a new field type]]></description>
            <content:encoded><![CDATA[<p>Rossum.ai recently introduced a new field type: <strong><a href="https://knowledge-base.rossum.ai/docs/reasoning-fields" target="_blank" rel="noopener noreferrer">Reasoning Fields</a></strong> (inline LLM fields). Here is all you need to know about them from a Solution Architect:</p>
<ol>
<li>Reasoning Fields are designed to output "single value" predictions. It's better to have <strong>many specialized fields</strong> than one that solves many problems simultaneously. Parsing address? Create one Reasoning Field per address chunk (as opposed to having one fields that resolves all the chunks at once).</li>
<li>Reasoning Fields <strong>remember previous predictions</strong> and manual changes (rather aggressively!). Same inputs are likely to return the same output even when the prompt or the underlying model changes. Currently, the best way to overwrite this is by introducing a "cache buster" field.</li>
<li>Reasoning Fields are LLM-based. Naturally, like any other LLM, they are not a good fit for tasks requiring <strong>accuracy</strong> or <strong>reproducibility</strong>. While reproducibility is solved by the caching mentioned above, accuracy is still a problem. Favor <a href="https://knowledge-base.rossum.ai/docs/formula-fields-in-rossum" target="_blank" rel="noopener noreferrer">Formula Fields</a> for deterministic outputs where possible (such as mathematical calculations).</li>
</ol>
<p>OK, so how do you use Reasoning Fields? In your queue settings, add a new field of type "Reasoning" and configure it as you like. For example, here is a prompt that determines the country code from the input address (<code>sender_address</code>):</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Please follow these instructions precisely.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">### **1. General Instructions**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Provide a single, three-letter, uppercase **ISO 3166-1 alpha-3** country code for the provided address string. The response must contain only this code, with no additional text, explanation, or punctuation.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">### **2. Field Instructions and Logic**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- **`sender_address`**: The input is a string representing a physical address.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- **Logic**:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    - Identify the country from the `sender_address`.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    - If the country is explicitly mentioned (e.g., "USA", "United Kingdom"), use that to determine the alpha-3 code.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    - If the country is missing, infer the country from contextual clues such as the city, postal code, or regional language conventions.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    - **Exclude/Ignore**: Do not consider the name of the street or the building number for country identification.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    - If, after all attempts at inference, the country remains ambiguous or unidentifiable, return the fallback code.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">### **3. Fallback and Output Format**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- The output must be exactly three uppercase letters.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- **`output_format`**: `[ISO 3166-1 alpha-3 code]`</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- If the country cannot be determined, the output must be **"UNK"** (Unknown).</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">### **4. Examples**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| Input Address | Output |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| :--- | :--- |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| 1600 Amphitheatre Parkway, Mountain View, CA 94043, USA | USA |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| 10 Downing Street, London SW1A 2AA | GBR |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| Křižíkova 148/34, 186 00 Karlín, Czech Republic | CZE |</span><br></span></code></pre></div></div>
<p>Protip: do not rely on the model's output to be correct, always verify it if possible. For example, the above prompt should clearly return a three-letter code, so you can write a validation rule that makes sure that the output conforms to the specification (and the ISO code actually exists). This way you make sure that the user-confirmed data is always correct. In return the future predictions will be more accurate.</p>
<div class="container_dm9A"><h3 class="header_J8KY">Test Your Knowledge</h3><p class="question_Y9ba">Which LLM API powers Reasoning Fields?</p><div class="buttonContainer_mbUi"><button class="button_lYqq">Anthropic (Claude)</button><button class="button_lYqq">ChatGPT</button><button class="button_lYqq">Gemini PRO</button><button class="button_lYqq">Grok</button><button class="button_lYqq">In-house LLM</button></div></div>
<p>Note that Reasoning Fields are still in beta and are subject to change. Get in touch with your Rossum representative if you have any questions or concerns.</p>]]></content:encoded>
            <category>reasoning-fields</category>
        </item>
        <item>
            <title><![CDATA[Multiple data matching results]]></title>
            <link>https://solutionarchitecthandbook.mrtnzlml.com/cookbook/multiple-data-matching-results</link>
            <guid>https://solutionarchitecthandbook.mrtnzlml.com/cookbook/multiple-data-matching-results</guid>
            <pubDate>Thu, 14 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Data matching (Master Data Hub; MDH) results are by default returned into an "enum" field in Rossum (also known as "Options" field). Enum field allows to select only one of the values returned (it behaves as a regular HTML select element with options). What if you need to select multiple values, however?]]></description>
            <content:encoded><![CDATA[<p>Data matching (Master Data Hub; MDH) results are by default returned into an "enum" field in Rossum (also known as "Options" field). Enum field allows to select only one of the values returned (it behaves as a regular <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/select" target="_blank" rel="noopener noreferrer">HTML select element</a> with options). What if you need to select multiple values, however?</p>
<p>The solution is to return all values into a <strong>hidden</strong> enum field and later process the data using a simple serverless function. In our example, the hidden field is <code>order_id_match</code>:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> txscript </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> TxScript</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> default_to</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> substitute</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rossum_hook_request_handler</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">payload</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    x </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> TxScript</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">from_payload</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">payload</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># Do not recalculate if the input data has not changed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># (add more fields depending on the input into your MDH query):</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    recalculate_hash </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:#e3116c">f"</span><span class="token string-interpolation interpolation punctuation" style="color:#393A34">{</span><span class="token string-interpolation interpolation">x</span><span class="token string-interpolation interpolation punctuation" style="color:#393A34">.</span><span class="token string-interpolation interpolation">field</span><span class="token string-interpolation interpolation punctuation" style="color:#393A34">.</span><span class="token string-interpolation interpolation">order_id</span><span class="token string-interpolation interpolation punctuation" style="color:#393A34">}</span><span class="token string-interpolation string" style="color:#e3116c">__</span><span class="token string-interpolation interpolation punctuation" style="color:#393A34">{</span><span class="token string-interpolation interpolation">x</span><span class="token string-interpolation interpolation punctuation" style="color:#393A34">.</span><span class="token string-interpolation interpolation">field</span><span class="token string-interpolation interpolation punctuation" style="color:#393A34">.</span><span class="token string-interpolation interpolation">grn_id</span><span class="token string-interpolation interpolation punctuation" style="color:#393A34">}</span><span class="token string-interpolation string" style="color:#e3116c">"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> x</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">field</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">recalculate_hash </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> recalculate_hash</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> x</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">hook_response</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># Get all valid enum options (result of the MDH query):</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    order_line_options </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> default_to</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">field</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">order_id_match</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">attr</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">options</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    valid_options </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        opt </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> opt </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> order_line_options </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> opt</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">value</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># Clear existing multivalue table:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    x</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">field</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">order_id_lines </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># Create new multivalue table:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    new_lines </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> option </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> valid_options</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        new_lines</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token string" style="color:#e3116c">"order__id"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> option</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">value</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic"># What about other columns? Keep reading. :)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># Insert new values into the multivalue table:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    x</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">field</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">order_id_lines </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> new_lines</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    x</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">field</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">recalculate_hash </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> recalculate_hash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> x</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">hook_response</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre></div></div>
<p>The function does the following:</p>
<ol>
<li>Get all valid options from the <code>order_id_match</code> enum field.</li>
<li>Clear the existing <code>order_id_lines</code> table (our destination).</li>
<li>Insert the enum values into the <code>order_id_lines</code> destination table.</li>
</ol>
<p>Additionally, it takes care of recalculating the table lazily so users can update the final table manually if needed (see the <code>recalculate_hash</code> field).</p>
<p>This way, all data matching results were populated into multivalue table despite the data matching supporting only enum fields.</p>
<p>Note that it might be a good idea to lazily load additional values in the table. In real-world solution, the chain of hooks would look like this:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">.---------.      .--------------------------.      .---------.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  MDH 1  | ---&gt; |  Custom hook from above  | ---&gt; |  MDH 2  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">`---------`      `--------------------------`      `---------`</span><br></span></code></pre></div></div>
<p>This way, we can distribute only row IDs from the first MDH extension and load the actual data in the second MDH extension. Alternatively, we could populate all the data in the first MDH hook. That is however a bit laborious when there are many columns to populate and distribute.</p>
<div class="container_dm9A"><h3 class="header_J8KY">Test Your Knowledge</h3><p class="question_Y9ba">Can master data hub extension return values to a string field?</p><div class="buttonContainer_mbUi"><button class="button_lYqq">Yes, MDH can return values into any preconfigured field</button><button class="button_lYqq">No, only enum fields are supported</button></div></div>]]></content:encoded>
            <category>master-data-hub</category>
            <category>rossum-formulas</category>
        </item>
    </channel>
</rss>