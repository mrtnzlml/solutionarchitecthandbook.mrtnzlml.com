"use strict";(self.webpackChunkuniversity=self.webpackChunkuniversity||[]).push([[9201],{7658:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>_,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"learn/line-items-grouping/alternative-python-solution","title":"Line items grouping: Alternative Python solution","description":"Consider using the following simple Python code (as a serverless function) that replaces the whole functionality of this extension (no need for any webhook):","source":"@site/docs/learn/line-items-grouping/alternative-python-solution.md","sourceDirName":"learn/line-items-grouping","slug":"/learn/line-items-grouping/alternative-python-solution","permalink":"/docs/learn/line-items-grouping/alternative-python-solution","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"Alternative Python solution","title":"Line items grouping: Alternative Python solution"},"sidebar":"learnSidebar","previous":{"title":"Configuration examples","permalink":"/docs/learn/line-items-grouping/configuration-examples"},"next":{"title":"Master data hub","permalink":"/docs/learn/master-data-hub/"}}');var o=n(4848),r=n(8453);const i={sidebar_position:2,sidebar_label:"Alternative Python solution",title:"Line items grouping: Alternative Python solution"},s="Alternative Python solution",l={},d=[];function u(e){const t={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"alternative-python-solution",children:"Alternative Python solution"})}),"\n",(0,o.jsxs)(t.p,{children:["Consider using the following simple Python code (as a ",(0,o.jsx)(t.a,{href:"/docs/learn/rossum-formulas/serverless-functions",children:"serverless function"}),") that replaces the whole functionality of this extension (no need for any webhook):"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-py",children:"from collections import defaultdict\nfrom rossum_python import RossumPython, is_empty, default_to, is_set\n\n\ndef sum_values(values):\n    \"\"\"Sums values if there are any, otherwise returns an empty string (not zero).\"\"\"\n    return sum(v for v in values if is_set(v)) if any(is_set(v) for v in values) else ''\n\n\ndef rossum_hook_request_handler(payload):\n    \"\"\"Group and sum VAT rows by rate, copying into export field.\"\"\"\n    x = RossumPython.from_payload(payload)\n\n    # Reset the target table:\n    x.field.tax_details_export = []\n\n    vat_rate_groups = defaultdict(lambda: {\n        'tax_detail_base_export': [],\n        'tax_detail_tax_export': [],\n        'tax_detail_total_export': [],\n        'tax_detail_description_export': None\n    })\n\n    for row in x.field.tax_details:\n        group = vat_rate_groups[row.tax_detail_rate_normalized.attr.value]\n        group['tax_detail_base_export'].append(row.tax_detail_base_normalized)\n        group['tax_detail_tax_export'].append(row.tax_detail_tax_normalized)\n        group['tax_detail_total_export'].append(row.tax_detail_total_normalized)\n        group['tax_detail_description_export'] = row.tax_detail_description\n\n    x.field.tax_details_export = [\n        {\n            'tax_detail_rate_export': rate,\n            'tax_detail_base_export': sum_values(values['tax_detail_base_export']),\n            'tax_detail_tax_export': sum_values(values['tax_detail_tax_export']),\n            'tax_detail_total_export': sum_values(values['tax_detail_total_export']),\n            'tax_detail_description_export': values['tax_detail_description_export'],\n        }\n        for rate, values in vat_rate_groups.items()\n    ]\n\n    return x.hook_response()\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Alternatively, you can use ",(0,o.jsx)(t.code,{children:"pandas"})," to do the same thing (note however, that it can have a performance impact since ",(0,o.jsx)(t.code,{children:"pandas"})," is a heavy dependency):"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-py",children:'import pandas as pd\nfrom txscript import TxScript, is_empty, default_to, is_set\n\n\ndef sum_values(values):\n    """Sums values if there are any, otherwise returns an empty string (not zero)."""\n    return sum(v for v in values if is_set(v)) if any(is_set(v) for v in values) else \'\'\n\n\ndef rossum_hook_request_handler(payload):\n    t = TxScript.from_payload(payload)\n\n    # Reset the target table:\n    t.field.line_items_grouped = []\n\n    # Collect all relevant data:\n    data = []\n    for row in t.field.line_items:\n        data.append({\n            "item_rate_grouped": row.item_rate.attr.value,  # Must use attr.value because of the `groupby` call!\n            "item_description_grouped": row.item_description,\n            "item_total_base_grouped": row.item_total_base,\n            "item_tax_grouped": row.item_tax,\n            "item_amount_total_grouped": row.item_amount_total,\n        })\n\n    # Group the data if any:\n    if len(data) > 0:\n        # https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html\n        t.field.line_items_grouped = (\n            pd.DataFrame(data)\n            .groupby(\'item_rate_grouped\')\n            .agg({\n                "item_description_grouped": "first",\n                "item_total_base_grouped": sum_values,\n                "item_tax_grouped": sum_values,\n                "item_amount_total_grouped": sum_values\n            })\n            .reset_index().to_dict("records")\n        )\n\n    return t.hook_response()\n'})})]})}function _(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var a=n(6540);const o={},r=a.createContext(o);function i(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);