"use strict";(self.webpackChunkuniversity=self.webpackChunkuniversity||[]).push([[6348],{2868:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"learn/automation/automation-unblocker","title":"Automation: Automation unblocker","description":"Unblocks specified datapoints when conditions are met.","source":"@site/docs/learn/automation/automation-unblocker.md","sourceDirName":"learn/automation","slug":"/learn/automation/automation-unblocker","permalink":"/docs/learn/automation/automation-unblocker","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Automation: Automation unblocker","sidebar_label":"Automation unblocker","sidebar_position":1},"sidebar":"learnSidebar","previous":{"title":"Automation","permalink":"/docs/learn/automation/"},"next":{"title":"Coupa","permalink":"/docs/learn/coupa/"}}');var i=e(4848),a=e(8453);const r={title:"Automation: Automation unblocker",sidebar_label:"Automation unblocker",sidebar_position:1},s="Automation unblocker",c={},d=[{value:"Source code",id:"source-code",level:2},{value:"Example configuration",id:"example-configuration",level:2}];function l(n){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"automation-unblocker",children:"Automation unblocker"})}),"\n",(0,i.jsx)(t.p,{children:"Unblocks specified datapoints when conditions are met."}),"\n",(0,i.jsx)(t.h2,{id:"source-code",children:"Source code"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-py",children:'from txscript import TxScript\nfrom typing import Callable, Dict, Iterator, List\nfrom pydantic import BaseModel\n\n\nclass FieldConfig(BaseModel):\n    check_field: str\n    fields_to_automate: List[str]\n\n\nclass Settings(BaseModel):\n    value_existence: List[FieldConfig] = []\n    single_option: List[FieldConfig] = []\n\n\ndef rossum_hook_request_handler(payload: dict) -> Dict[str, list]:\n    settings = Settings.parse_obj(payload["settings"])\n    content = payload["annotation"]["content"]\n\n    operations = []\n\n    for config in settings.value_existence:\n        automation_ops = automate(\n            config,\n            content,\n            lambda dp: dp["content"]["value"] != "",\n        )\n        operations.extend(automation_ops)\n\n    for config in settings.single_option:\n        automation_ops = automate(\n            config,\n            content,\n            lambda dp: len(dp.get("options",[])) == 1 and dp["content"]["value"] != "",\n        )\n        operations.extend(automation_ops)\n\n    return {"operations": operations}\n\n\ndef automate(\n    config: FieldConfig,\n    content: List[dict],\n    condition: Callable[[dict], bool],\n) -> List[dict]:\n    operations = []\n    for datapoint in find_all_by_schema_id(content, config.check_field):\n        if condition(datapoint):\n            for schema_id in config.fields_to_automate:\n                for automated_dp in find_all_by_schema_id(content, schema_id):\n                    operations.append(create_automation_operation(automated_dp))\n    return operations\n\n\n\ndef create_automation_operation(\n    datapoint: dict,\n    automation_type: str = "connector",\n) -> dict:\n    """\n    Enable automation of a specific field by updating its validation sources.\n    :param datapoint: content of the datapoint\n    :param automation_type: type of the automation validation source to be used\n    :return: dict with replace operation definition (see https://api.elis.rossum.ai/docs/#annotation-content-event-response-format)\n    """\n    validation_sources = datapoint["validation_sources"]\n\n    if automation_type not in validation_sources:\n        validation_sources.append(automation_type)\n\n    return {\n        "op": "replace",\n        "id": datapoint["id"],\n        "value": {"validation_sources": validation_sources},\n    }\n\n\ndef find_all_by_schema_id(content: List[dict], schema_id: str) -> Iterator[dict]:\n    for node in content:\n        if node["schema_id"] == schema_id:\n            yield node\n        elif children := node.get("children"):\n            yield from find_all_by_schema_id(children, schema_id)\n'})}),"\n",(0,i.jsx)(t.h2,{id:"example-configuration",children:"Example configuration"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'{\n  "single_option": [\n    {\n      "check_field": "order_header_match",\n      "fields_to_automate": ["order_id"]\n    }\n  ]\n}\n'})})]})}function u(n={}){const{wrapper:t}={...(0,a.R)(),...n.components};return t?(0,i.jsx)(t,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}},8453:(n,t,e)=>{e.d(t,{R:()=>r,x:()=>s});var o=e(6540);const i={},a=o.createContext(i);function r(n){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function s(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),o.createElement(a.Provider,{value:t},n.children)}}}]);